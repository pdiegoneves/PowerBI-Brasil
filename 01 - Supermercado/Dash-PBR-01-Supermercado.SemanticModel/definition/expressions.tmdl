expression 'Erros em F_Vendas' =
		let
		Fonte = F_Vendas,
		  #"Incompatibilidades de Tipo Detectadas" = let
		    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Fonte, Table.ColumnsOfType(Fonte, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),
		    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),
		    fieldNames = Record.FieldNames(recordTypeFields),
		    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),
		    pairs = List.Transform(List.Positions(fieldNames), (i) => {fieldNames{i}, (v) => if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = "O tipo do valor não corresponde ao tipo da coluna.", Detail = v], fieldTypes{i}})
		in
		    Table.TransformColumns(Fonte, pairs),
		  #"Índice Adicionado" = Table.AddIndexColumn(#"Incompatibilidades de Tipo Detectadas", "Número da Linha" ,1),
		  #"Erros Mantidos" = Table.SelectRowsWithErrors(#"Índice Adicionado", {"Invoice ID", "Branch", "City", "Customer type", "Gender", "Product line", "Unit price", "Quantity", "Tax 5%", "Total", "Time", "Payment", "cogs", "Rating", "DataFormatada"}),
		  #"Colunas Reordenadas" = Table.ReorderColumns(#"Erros Mantidos", {"Número da Linha", "Invoice ID", "Branch", "City", "Customer type", "Gender", "Product line", "Unit price", "Quantity", "Tax 5%", "Total", "Time", "Payment", "cogs", "Rating", "DataFormatada"}),
		    DataFormatada = #"Colunas Reordenadas"{0}[DataFormatada]
		in
		  DataFormatada
	lineageTag: db2050aa-10f1-4247-ba98-cb48018f4fb4
	queryGroup: 'Erros na Consulta - 27/04/2024 18:24:39'

	annotation PBI_NavigationStepName = Navegação

	annotation PBI_ResultType = Exception

